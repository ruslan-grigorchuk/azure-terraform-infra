# GitHub Actions Workflow for Terraform Infrastructure
# Comprehensive CI/CD pipeline with security scanning and multi-environment deployment

name: 'Terraform Infrastructure'

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  # Validation and Security Scanning
  validate:
    name: 'Validate and Security Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          terraform fmt -check -recursive .
          if [ $? -ne 0 ]; then
            echo "‚ùå Terraform files are not properly formatted"
            echo "Run: terraform fmt -recursive ."
            exit 1
          fi

      - name: Terraform Validate
        run: |
          terraform init -backend=false
          terraform validate

      - name: Run Custom Validation
        run: |
          chmod +x scripts/validate.sh
          ./scripts/validate.sh

      - name: Security Scan with TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: sarif
          output: tfsec.sarif

      - name: Upload TFSec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec.sarif

      - name: Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # Development Environment
  deploy-dev:
    name: 'Deploy Development'
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: development
    env:
      TF_VAR_environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=dev.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var-file="environments/dev/terraform.tfvars" \
            -out="dev.tfplan" \
            -detailed-exitcode
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### Terraform Plan (Development) üìã
            
            #### Plan Status: \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve dev.tfplan

      - name: Output Infrastructure Info
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
        run: |
          terraform output -json > dev-outputs.json
          echo "Development deployment completed successfully"

      - name: Upload Terraform Outputs
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-dev
          path: dev-outputs.json

  # Staging Environment
  deploy-staging:
    name: 'Deploy Staging'
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    environment: staging  # Requires approval in GitHub environments
    env:
      TF_VAR_environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=staging.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="environments/staging/terraform.tfvars" \
            -out="staging.tfplan"

      - name: Terraform Apply
        run: terraform apply -auto-approve staging.tfplan

      - name: Post-Deployment Testing
        run: |
          terraform output -json > staging-outputs.json
          # Add health checks here
          echo "Staging deployment completed successfully"

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-staging
          path: staging-outputs.json

  # Production Environment
  deploy-prod:
    name: 'Deploy Production'
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production  # Requires approval and additional protection
    env:
      TF_VAR_environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Enhanced Security Validation
        run: |
          echo "Running enhanced security validation for production..."
          ./scripts/validate.sh
          
          # Additional production-specific security checks
          if command -v tfsec &> /dev/null; then
            tfsec . --minimum-severity HIGH
          fi

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=prod.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var-file="environments/prod/terraform.tfvars" \
            -out="prod.tfplan" \
            -detailed-exitcode

      - name: Generate Plan Summary
        run: |
          terraform show -no-color prod.tfplan > terraform-plan-output.txt
          echo "Production plan created and ready for deployment"

      - name: Upload Production Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-production
          path: terraform-plan-output.txt

      - name: Terraform Apply
        if: github.event.inputs.destroy != 'true'
        run: terraform apply -auto-approve prod.tfplan

      - name: Terraform Destroy
        if: github.event.inputs.destroy == 'true'
        run: |
          terraform destroy \
            -var-file="environments/prod/terraform.tfvars" \
            -auto-approve

      - name: Production Health Check
        if: github.event.inputs.destroy != 'true'
        run: |
          terraform output -json > prod-outputs.json
          
          # Comprehensive health checks for production
          if [ -f prod-outputs.json ]; then
            APP_URL=$(cat prod-outputs.json | jq -r '.app_service_url.value')
            echo "Testing production application at: $APP_URL"
            
            # Health check with retry logic
            for i in {1..5}; do
              if curl -f -s "$APP_URL" > /dev/null; then
                echo "‚úÖ Production health check passed"
                break
              else
                echo "‚ö†Ô∏è  Health check attempt $i failed, retrying..."
                sleep 30
              fi
            done
          fi

      - name: Upload Production Outputs
        if: github.event.inputs.destroy != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-production
          path: prod-outputs.json

  # Infrastructure Drift Detection
  drift-detection:
    name: 'Drift Detection'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Check for Infrastructure Drift
        env:
          TF_VAR_environment: ${{ matrix.environment }}
        run: |
          echo "Checking for infrastructure drift in ${{ matrix.environment }} environment..."
          
          terraform init \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ matrix.environment }}.terraform.tfstate" \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}"
          
          set +e
          terraform plan \
            -var-file="environments/${{ matrix.environment }}/terraform.tfvars" \
            -detailed-exitcode \
            -out="${{ matrix.environment }}-drift.tfplan"
          DRIFT_EXIT_CODE=$?
          set -e
          
          if [ "$DRIFT_EXIT_CODE" = "2" ]; then
            echo "‚ö†Ô∏è  Infrastructure drift detected in ${{ matrix.environment }}!"
            terraform show -no-color "${{ matrix.environment }}-drift.tfplan" > "${{ matrix.environment }}-drift-report.txt"
            exit 1
          elif [ "$DRIFT_EXIT_CODE" = "1" ]; then
            echo "‚ùå Error occurred during drift detection in ${{ matrix.environment }}"
            exit 1
          else
            echo "‚úÖ No infrastructure drift detected in ${{ matrix.environment }}"
          fi

      - name: Upload Drift Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: drift-report-${{ matrix.environment }}
          path: ${{ matrix.environment }}-drift-report.txt